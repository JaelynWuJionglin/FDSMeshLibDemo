Index: FDSMeshLib/src/main/java/com.godox.sdk/api/FDSMeshApi.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.godox.sdk.api\r\n\r\nimport com.base.mesh.api.listener.NodeStatusChangeListener\r\nimport com.godox.sdk.api.imp.FDSMeshImp\r\nimport com.godox.sdk.api.interfaces.FDSMeshInterface\r\nimport com.godox.sdk.callbacks.FDSOTACallBack\r\nimport com.godox.sdk.callbacks.FDSResponseCallBack\r\nimport com.godox.sdk.model.FDSNodeInfo\r\nimport com.godox.sdk.model.FDSGroupInfo\r\n\r\nclass FDSMeshApi private constructor(private val fdsMeshImp: FDSMeshInterface) {\r\n\r\n    /**\r\n     * 单例\r\n     */\r\n    companion object {\r\n        val instance by lazy(LazyThreadSafetyMode.NONE) {\r\n            FDSMeshApi(FDSMeshImp.instance)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置接入使用需要申请AppId\r\n     * @param appId 应用AppId\r\n     */\r\n    fun setWithAppId(appId: String) {\r\n        fdsMeshImp.setWithAppId(appId)\r\n    }\r\n\r\n    /**\r\n     * 获取SDK版本号\r\n     * @return 版本x.x.x\r\n     */\r\n    fun getVersion(): String {\r\n        return fdsMeshImp.getVersion()\r\n    }\r\n\r\n    /**\r\n     * SDK日志\r\n     * @param isOpen true表示启用，false表示关闭\r\n     * @param isSave true表示保存日志，false表示不保存日志\r\n     */\r\n    fun initSdkLog(isOpen: Boolean, isSave: Boolean) {\r\n        fdsMeshImp.initSdkLog(isOpen, isSave)\r\n    }\r\n\r\n    /**\r\n     * 获取节点列表\r\n     * @return 节点列表\r\n     */\r\n    fun getFDSNodes(): MutableList<FDSNodeInfo> {\r\n        return fdsMeshImp.getFDSNodes()\r\n    }\r\n\r\n    /**\r\n     * 获取组列表\r\n     * @return 组列表\r\n     */\r\n    fun getGroups(): MutableList<FDSGroupInfo> {\r\n        return fdsMeshImp.getGroups()\r\n    }\r\n\r\n    /**\r\n     * 获取订阅组的设备节点列表\r\n     * @param address 组地址\r\n     * @return 节点列表\r\n     */\r\n    fun getGroupFDSNodes(address: Int): MutableList<FDSNodeInfo> {\r\n        return fdsMeshImp.getGroupFDSNodes(address)\r\n    }\r\n\r\n    /**\r\n     * 获取未订阅组的节点列表\r\n     * @return 节点列表\r\n     */\r\n    fun getFDSNodeWhitOutGroup(): MutableList<FDSNodeInfo> {\r\n        return fdsMeshImp.getFDSNodeWhitOutGroup()\r\n    }\r\n\r\n    /**\r\n     * 获取直连节点\r\n     * @return 直连节点\r\n     */\r\n    fun getConnectedFDSNodeInfo(): FDSNodeInfo? {\r\n        return fdsMeshImp.getConnectedFDSNodeInfo()\r\n    }\r\n\r\n    /**\r\n     * 根据MAC地址获取指定节点\r\n     * @param macAddress 节点MAC地址\r\n     * @return\r\n     */\r\n    fun getFDSNodeInfoByMacAddress(macAddress: String): FDSNodeInfo? {\r\n        return fdsMeshImp.getFDSNodeInfoByMacAddress(macAddress)\r\n    }\r\n\r\n    /**\r\n     * 根据组地址获取组\r\n     * @param address 组地址\r\n     * @return\r\n     */\r\n    fun getGroupByAddress(address: Int): FDSGroupInfo? {\r\n        return fdsMeshImp.getGroupByAddress(address)\r\n    }\r\n\r\n    /**\r\n     * 重命名节点名称和类型\r\n     * @param fdsNodeInfo 节点\r\n     * @param name 节点名称\r\n     * @param type 节点类型\r\n     * @return true表示重命名成功，false表示重命名失败\r\n     */\r\n    fun renameFDSNodeInfo(fdsNodeInfo: FDSNodeInfo, name: String, type: String): Boolean {\r\n        return fdsMeshImp.renameFDSNodeInfo(fdsNodeInfo, name, type)\r\n    }\r\n\r\n    /**\r\n     * 创建组\r\n     * @param name 组名称\r\n     * @return FDSGroupInfo\r\n     */\r\n    fun createGroup(name: String): FDSGroupInfo {\r\n        return fdsMeshImp.createGroup(name)\r\n    }\r\n\r\n    /**\r\n     * 重命名组\r\n     * @param groupInfo 组\r\n     * @param name 组名称\r\n     * @return true表示重命名成功，false表示重命名失败\r\n     */\r\n    fun renameGroup(groupInfo: FDSGroupInfo, name: String): Boolean {\r\n        return fdsMeshImp.renameGroup(groupInfo, name)\r\n    }\r\n\r\n    /**\r\n     * 移除组\r\n     * @param groupInfo 组\r\n     * @return true表示删除成功，false表示删除失败\r\n     */\r\n    fun removeGroup(groupInfo: FDSGroupInfo): Boolean {\r\n        return fdsMeshImp.removeGroup(groupInfo)\r\n    }\r\n\r\n    /**\r\n     * 配置节点“订阅/取消订阅”组\r\n     * @param fdsNodeInfo 节点\r\n     * @param groupInfo 组\r\n     * @param isAdd true表示订阅到组，false表示取消订阅\r\n     * @return true表示成功，false表示失败\r\n     */\r\n    fun configSubscribe(\r\n        fdsNodeInfo: FDSNodeInfo,\r\n        groupInfo: FDSGroupInfo,\r\n        isSubscribe: Boolean,\r\n        subscribeListener: (Boolean) -> Unit\r\n    ) {\r\n        fdsMeshImp.configSubscribe(fdsNodeInfo, groupInfo, isSubscribe, subscribeListener)\r\n    }\r\n\r\n    /**\r\n     * 检测和刷新节点在线状态\r\n     */\r\n    fun refreshFDSNodeInfoState() {\r\n        fdsMeshImp.refreshFDSNodeInfoState()\r\n    }\r\n\r\n    /**\r\n     * 设置节点在线状态改变的监听\r\n     */\r\n    fun addFDSNodeStatusChangeCallBack(fdsNodeStatusChangeListener: NodeStatusChangeListener) {\r\n        fdsMeshImp.addFDSNodeStatusChangeCallBack(fdsNodeStatusChangeListener)\r\n    }\r\n\r\n    /**\r\n     * 取消节点在线状态改变的监听\r\n     */\r\n    fun removeFDSNodeStatusChangeCallBack(fdsNodeStatusChangeListener: NodeStatusChangeListener) {\r\n        fdsMeshImp.removeFDSNodeStatusChangeCallBack(fdsNodeStatusChangeListener)\r\n    }\r\n\r\n    /**\r\n     * 配置节点自动上报在线状态\r\n     * @param isOn true表示开启自动上报，false表示取消自动上报\r\n     * @param fdsNodeInfo 节点\r\n     */\r\n    fun configFDSNodePublishState(isOn: Boolean, fdsNodeInfo: FDSNodeInfo): Boolean {\r\n        return fdsMeshImp.configFDSNodePublishState(isOn, fdsNodeInfo)\r\n    }\r\n\r\n    /**\r\n     * 发送消息数据\r\n     * @param address 发送地址\r\n     * @param data 消息数据\r\n     * @param responseOpcode 回响应操作码 - 0xF0或0xF1\r\n     */\r\n    fun sendData(address: Int, data: ByteArray, responseOpcode: Int) {\r\n        fdsMeshImp.sendData(address, data, responseOpcode)\r\n    }\r\n\r\n    /**\r\n     * 发送数据响应\r\n     * @param fdsResponseCallBack 发送数据响应回调\r\n     */\r\n    fun setResponseDataCallBack(fdsResponseCallBack: FDSResponseCallBack) {\r\n        fdsMeshImp.setResponseDataCallBack(fdsResponseCallBack)\r\n    }\r\n\r\n    /**\r\n     * 导入/替换Mesh信息\r\n     * @param meshJson 组网JSON信息\r\n     */\r\n    fun importMeshJson(meshJson: String) {\r\n        fdsMeshImp.importMeshJson(meshJson)\r\n    }\r\n\r\n    /**\r\n     * 获取初始Mesh信息（新增场景时需要）\r\n     * @return Mesh Json字符串\r\n     */\r\n    fun getInitMeshJson(): String {\r\n        return fdsMeshImp.getInitMeshJson()\r\n    }\r\n\r\n    /**\r\n     * 获取当前Mesh信息（保存或分享场景时需要）\r\n     * @return Mesh Json字符串\r\n     */\r\n    fun getCurrentMeshJson(): String {\r\n        return fdsMeshImp.getCurrentMeshJson()\r\n    }\r\n\r\n    /**\r\n     * 开启OTA升级\r\n     * @param otaData 固件数据\r\n     * @param fdsNodeInfo 节点\r\n     * @param callBack OTA升级回调\r\n     * @return true表示开启成功，false表示开启失败\r\n     */\r\n    fun startOTAWithOtaData(\r\n        otaData: ByteArray?,\r\n        fdsNodeInfo: FDSNodeInfo,\r\n        callBack: FDSOTACallBack\r\n    ): Boolean {\r\n        return fdsMeshImp.startOTAWithOtaData(otaData, fdsNodeInfo, callBack)\r\n    }\r\n\r\n    /**\r\n     * 结束OTA升级\r\n     */\r\n    fun stopOTA() {\r\n        fdsMeshImp.stopOTA()\r\n    }\r\n\r\n    /**\r\n     * 开启MCU OTA升级\r\n     * @param otaData 固件数据\r\n     * @param version 固件版本\r\n     * @param fdsNodeInfo 节点\r\n     * @param callBack MCU OTA升级回调\r\n     * @return  true表示开启成功，false表示开启失败\r\n     */\r\n    fun startMcuOTAWithOtaData(\r\n        otaData: ByteArray,\r\n        version: Int,\r\n        fdsNodeInfo: FDSNodeInfo,\r\n        callBack: FDSOTACallBack\r\n    ): Boolean {\r\n        return fdsMeshImp.startMcuOTAWithOtaData(otaData, version, fdsNodeInfo, callBack)\r\n    }\r\n\r\n    /**\r\n     * 结束MCU OTA升级\r\n     */\r\n    fun stopMcuOTA() {\r\n        fdsMeshImp.stopMcuOTA()\r\n    }\r\n\r\n    /**\r\n     * 销毁并释放资源\r\n     */\r\n    fun destroy() {\r\n        fdsMeshImp.destroy()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/FDSMeshLib/src/main/java/com.godox.sdk/api/FDSMeshApi.kt b/FDSMeshLib/src/main/java/com.godox.sdk/api/FDSMeshApi.kt
--- a/FDSMeshLib/src/main/java/com.godox.sdk/api/FDSMeshApi.kt	(revision ca3b242b2b9e931de28ad58599de73e77ce90824)
+++ b/FDSMeshLib/src/main/java/com.godox.sdk/api/FDSMeshApi.kt	(date 1664178454035)
@@ -194,8 +194,8 @@
      * @param data 消息数据
      * @param responseOpcode 回响应操作码 - 0xF0或0xF1
      */
-    fun sendData(address: Int, data: ByteArray, responseOpcode: Int) {
-        fdsMeshImp.sendData(address, data, responseOpcode)
+    fun sendData(address: Int, data: ByteArray, responseOpcode: Int): Boolean {
+        return fdsMeshImp.sendData(address, data, responseOpcode)
     }
 
     /**
Index: FDSMeshLib/src/main/java/com.godox.sdk/api/imp/FDSMeshImp.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.godox.sdk.api.imp\r\n\r\nimport android.content.Context\r\nimport android.text.TextUtils\r\nimport android.util.Log\r\nimport com.base.mesh.api.listener.NodeStatusChangeListener\r\nimport com.base.mesh.api.main.MeshNodeStatusChange\r\nimport com.godox.sdk.Configures\r\nimport com.base.mesh.api.main.MeshNodeSubscribe\r\nimport com.godox.sdk.MeshApp\r\nimport com.godox.sdk.tool.send.SendCmdUtils\r\nimport com.godox.sdk.api.interfaces.FDSMeshInterface\r\nimport com.godox.sdk.callbacks.FDSOTACallBack\r\nimport com.godox.sdk.callbacks.FDSResponseCallBack\r\nimport com.godox.sdk.model.FDSNodeInfo\r\nimport com.godox.sdk.model.FDSGroupInfo\r\nimport com.godox.sdk.model.MeshInfo\r\nimport com.telink.ble.mesh.util.LOGUtils\r\n\r\ninternal class FDSMeshImp : FDSMeshInterface {\r\n    private val TAG = \"FDSMeshApi\"\r\n    private var context: Context? = null\r\n    private val sendCmdUtils = SendCmdUtils.instance\r\n    private val meshNodeSub = MeshNodeSubscribe()\r\n    private val nodeStatusChange = MeshNodeStatusChange.instance\r\n\r\n    companion object {\r\n        val instance by lazy(LazyThreadSafetyMode.NONE) {\r\n            FDSMeshImp()\r\n        }\r\n    }\r\n\r\n    private fun getMeshInfo(): MeshInfo {\r\n        return MeshApp.getInstance().getMeshInfo()\r\n    }\r\n\r\n    /**\r\n     * 初始化SDK\r\n     *（MeshApp中已做，只需要app的Application继承MeshApp）\r\n     */\r\n    fun init(context: Context){\r\n        LOGUtils.d(\"FDSMeshImp init()\")\r\n        this.context = context\r\n    }\r\n\r\n    override fun setWithAppId(appId: String) {\r\n        TODO(\"Not yet implemented\")\r\n    }\r\n\r\n    override fun getVersion(): String {\r\n        return Configures.SDK_VERSION\r\n    }\r\n\r\n    //SDK日志\r\n    override fun initSdkLog(isOpen: Boolean, isSave: Boolean) {\r\n        if (context != null){\r\n            LOGUtils.initSaveLog(context!!, isOpen, isSave)\r\n        } else {\r\n            Log.e(TAG,\"initSdkLog() 初始化失败! context == null\")\r\n        }\r\n    }\r\n\r\n    //获取节点列表\r\n    override fun getFDSNodes(): MutableList<FDSNodeInfo> {\r\n        return getMeshInfo().fdsNodes\r\n    }\r\n\r\n    //获取组列表\r\n    override fun getGroups(): MutableList<FDSGroupInfo> {\r\n        return getMeshInfo().groups\r\n    }\r\n\r\n    //获取订阅组的设备节点列表\r\n    override fun getGroupFDSNodes(address: Int): MutableList<FDSNodeInfo> {\r\n        val list = mutableListOf<FDSNodeInfo>()\r\n        for (node in getMeshInfo().nodes) {\r\n            if (node.isSunAddress(address)) {\r\n                val fdsNodeInfo = getMeshInfo().getFDSNodesByMeshAddress(node.meshAddress)\r\n                if (fdsNodeInfo != null) {\r\n                    list.add(fdsNodeInfo)\r\n                }\r\n            }\r\n        }\r\n        return list\r\n    }\r\n\r\n    //获取未订阅组的节点列表\r\n    override fun getFDSNodeWhitOutGroup(): MutableList<FDSNodeInfo> {\r\n        val list = mutableListOf<FDSNodeInfo>()\r\n        if (getMeshInfo().nodes.isEmpty()){\r\n            return list\r\n        }\r\n\r\n        for (node in getMeshInfo().nodes) {\r\n            if (node.subList.isEmpty()){\r\n                getMeshInfo().getFDSNodesByMeshAddress(node.meshAddress)?.let { list.add(it) }\r\n            }\r\n        }\r\n        return list\r\n    }\r\n\r\n    //获取直连节点\r\n    override fun getConnectedFDSNodeInfo(): FDSNodeInfo? {\r\n        val nodeInfo = getMeshInfo().getConnectedNodeInfo()\r\n        if (nodeInfo != null){\r\n            return getMeshInfo().getFDSNodesByMeshAddress(nodeInfo.meshAddress)\r\n        }\r\n        return null\r\n    }\r\n\r\n    //根据MAC地址获取指定节点\r\n    override fun getFDSNodeInfoByMacAddress(macAddress: String): FDSNodeInfo? {\r\n        for (info in getMeshInfo().fdsNodes) {\r\n            if (info.macAddress == macAddress) return info\r\n        }\r\n        return null\r\n    }\r\n\r\n    //根据组地址获取组\r\n    override fun getGroupByAddress(address: Int): FDSGroupInfo? {\r\n        for (groupInfo in getMeshInfo().groups){\r\n            if (address == groupInfo.address){\r\n                return groupInfo\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    //修改节点名称\r\n    override fun renameFDSNodeInfo(fdsNodeInfo: FDSNodeInfo, name: String, type: String): Boolean {\r\n        for (node in getMeshInfo().fdsNodes){\r\n            if (node.meshAddress == fdsNodeInfo.meshAddress){\r\n                node.name = name\r\n                if (!TextUtils.isEmpty(type)) {\r\n                    node.type = type\r\n                }\r\n                return MeshApp.getInstance().saveOrUpdate()\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    //创建组\r\n    override fun createGroup(name: String): FDSGroupInfo {\r\n        val fdsGroupInfo = getMeshInfo().createGroup(name)\r\n        MeshApp.getInstance().saveOrUpdate()\r\n        return fdsGroupInfo\r\n    }\r\n\r\n    //重名了组\r\n    override fun renameGroup(groupInfo: FDSGroupInfo, name: String): Boolean {\r\n        val group = getGroupByAddress(groupInfo.address)\r\n        if (group != null){\r\n            group.name = name\r\n            return MeshApp.getInstance().saveOrUpdate()\r\n        }\r\n        return false\r\n    }\r\n\r\n    //删除组\r\n    override fun removeGroup(groupInfo: FDSGroupInfo): Boolean {\r\n        val iterator = getMeshInfo().groups.iterator()\r\n        while (iterator.hasNext()){\r\n            val group = iterator.next()\r\n            if (group.address == groupInfo.address){\r\n                iterator.remove()\r\n            }\r\n        }\r\n        return MeshApp.getInstance().saveOrUpdate()\r\n    }\r\n\r\n    //订阅或者取消订阅组\r\n    override fun configSubscribe(\r\n        fdsNodeInfo: FDSNodeInfo,\r\n        groupInfo: FDSGroupInfo,\r\n        isSubscribe: Boolean,\r\n        subscribeListener: (Boolean) -> Unit\r\n    ) {\r\n        val nodeInfo = getMeshInfo().getDeviceByMeshAddress(fdsNodeInfo.meshAddress)\r\n        if (nodeInfo != null){\r\n            meshNodeSub.setSubscribeListener(subscribeListener)\r\n            meshNodeSub.nodeSubscribeGroup(nodeInfo,groupInfo.address,isSubscribe)\r\n        } else {\r\n            LOGUtils.e(\"configSubscribe() 不存在的设备地址 ${fdsNodeInfo.meshAddress}\")\r\n            subscribeListener(false)\r\n        }\r\n    }\r\n\r\n    //刷新节点在线状态\r\n    override fun refreshFDSNodeInfoState() {\r\n        sendCmdUtils.refreshNodeInfoState()\r\n    }\r\n\r\n    //添加节点在线状态改变\r\n    override fun addFDSNodeStatusChangeCallBack(fdsNodeStatusChangeListener: NodeStatusChangeListener) {\r\n        nodeStatusChange.addNodeStatusChangeListener(fdsNodeStatusChangeListener)\r\n    }\r\n\r\n    //取消节点在线状态改变\r\n    override fun removeFDSNodeStatusChangeCallBack(fdsNodeStatusChangeListener: NodeStatusChangeListener) {\r\n        nodeStatusChange.removeNodeStatusChangeListener(fdsNodeStatusChangeListener)\r\n    }\r\n\r\n    //配置节点主动上报在线状态\r\n    override fun configFDSNodePublishState(isOn: Boolean, fdsNodeInfo: FDSNodeInfo): Boolean {\r\n        val nodeInfo = getMeshInfo().getDeviceByMeshAddress(fdsNodeInfo.meshAddress)\r\n        if (nodeInfo != null){\r\n            return sendCmdUtils.configNodePublishState(isOn,nodeInfo)\r\n        }\r\n        return false\r\n    }\r\n\r\n    //发送数据\r\n    override fun sendData(address: Int, data: ByteArray, responseOpcode: Int) {\r\n        sendCmdUtils.send(address,data,responseOpcode)\r\n    }\r\n\r\n    //设置发送数据的响应数据回调\r\n    override fun setResponseDataCallBack(fdsResponseCallBack: FDSResponseCallBack) {\r\n        //sendCmdUtils.setResponseDataCallBack(fdsResponseCallBack)\r\n    }\r\n\r\n    //导入Json\r\n    override fun importMeshJson(meshJson: String) {\r\n        TODO(\"Not yet implemented\")\r\n    }\r\n\r\n    //获取初始Mesh信息\r\n    override fun getInitMeshJson(): String {\r\n        TODO(\"Not yet implemented\")\r\n    }\r\n\r\n    //获取当前Mesh信息\r\n    override fun getCurrentMeshJson(): String {\r\n        TODO(\"Not yet implemented\")\r\n    }\r\n\r\n    //Ota\r\n    override fun startOTAWithOtaData(\r\n        otaData: ByteArray?,\r\n        fdsNodeInfo: FDSNodeInfo,\r\n        callBack: FDSOTACallBack\r\n    ): Boolean {\r\n        TODO(\"Not yet implemented\")\r\n    }\r\n\r\n    //OTA stop\r\n    override fun stopOTA() {\r\n        TODO(\"Not yet implemented\")\r\n    }\r\n\r\n    //Ota\r\n    override fun startMcuOTAWithOtaData(\r\n        otaData: ByteArray,\r\n        version: Int,\r\n        fdsNodeInfo: FDSNodeInfo,\r\n        callBack: FDSOTACallBack\r\n    ): Boolean {\r\n        TODO(\"Not yet implemented\")\r\n    }\r\n\r\n    //OTA stop\r\n    override fun stopMcuOTA() {\r\n        TODO(\"Not yet implemented\")\r\n    }\r\n\r\n    override fun destroy() {\r\n        sendCmdUtils.destroy()\r\n        meshNodeSub.destroy()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/FDSMeshLib/src/main/java/com.godox.sdk/api/imp/FDSMeshImp.kt b/FDSMeshLib/src/main/java/com.godox.sdk/api/imp/FDSMeshImp.kt
--- a/FDSMeshLib/src/main/java/com.godox.sdk/api/imp/FDSMeshImp.kt	(revision ca3b242b2b9e931de28ad58599de73e77ce90824)
+++ b/FDSMeshLib/src/main/java/com.godox.sdk/api/imp/FDSMeshImp.kt	(date 1664179318692)
@@ -15,6 +15,7 @@
 import com.godox.sdk.model.FDSNodeInfo
 import com.godox.sdk.model.FDSGroupInfo
 import com.godox.sdk.model.MeshInfo
+import com.godox.sdk.tool.AppIDVerification
 import com.telink.ble.mesh.util.LOGUtils
 
 internal class FDSMeshImp : FDSMeshInterface {
@@ -38,40 +39,55 @@
      * 初始化SDK
      *（MeshApp中已做，只需要app的Application继承MeshApp）
      */
-    fun init(context: Context){
+    fun init(context: Context) {
         LOGUtils.d("FDSMeshImp init()")
         this.context = context
     }
 
+    //校验AppId
     override fun setWithAppId(appId: String) {
-        TODO("Not yet implemented")
+        if (context != null) {
+            AppIDVerification.instance.setAppId(context!!,appId)
+        } else {
+            LOGUtils.e("Error! setWithAppId() context == null")
+        }
     }
 
+    //SDK版本
     override fun getVersion(): String {
         return Configures.SDK_VERSION
     }
 
     //SDK日志
     override fun initSdkLog(isOpen: Boolean, isSave: Boolean) {
-        if (context != null){
+        if (context != null) {
             LOGUtils.initSaveLog(context!!, isOpen, isSave)
         } else {
-            Log.e(TAG,"initSdkLog() 初始化失败! context == null")
+            Log.e(TAG, "initSdkLog() 初始化失败! context == null")
         }
     }
 
     //获取节点列表
     override fun getFDSNodes(): MutableList<FDSNodeInfo> {
+        if (!AppIDVerification.instance.isVerificationPassed()) {
+            return mutableListOf()
+        }
         return getMeshInfo().fdsNodes
     }
 
     //获取组列表
     override fun getGroups(): MutableList<FDSGroupInfo> {
+        if (!AppIDVerification.instance.isVerificationPassed()) {
+            return mutableListOf()
+        }
         return getMeshInfo().groups
     }
 
     //获取订阅组的设备节点列表
     override fun getGroupFDSNodes(address: Int): MutableList<FDSNodeInfo> {
+        if (!AppIDVerification.instance.isVerificationPassed()) {
+            return mutableListOf()
+        }
         val list = mutableListOf<FDSNodeInfo>()
         for (node in getMeshInfo().nodes) {
             if (node.isSunAddress(address)) {
@@ -86,13 +102,16 @@
 
     //获取未订阅组的节点列表
     override fun getFDSNodeWhitOutGroup(): MutableList<FDSNodeInfo> {
+        if (!AppIDVerification.instance.isVerificationPassed()) {
+            return mutableListOf()
+        }
         val list = mutableListOf<FDSNodeInfo>()
-        if (getMeshInfo().nodes.isEmpty()){
+        if (getMeshInfo().nodes.isEmpty()) {
             return list
         }
 
         for (node in getMeshInfo().nodes) {
-            if (node.subList.isEmpty()){
+            if (node.subList.isEmpty()) {
                 getMeshInfo().getFDSNodesByMeshAddress(node.meshAddress)?.let { list.add(it) }
             }
         }
@@ -101,8 +120,11 @@
 
     //获取直连节点
     override fun getConnectedFDSNodeInfo(): FDSNodeInfo? {
+        if (!AppIDVerification.instance.isVerificationPassed()) {
+            return null
+        }
         val nodeInfo = getMeshInfo().getConnectedNodeInfo()
-        if (nodeInfo != null){
+        if (nodeInfo != null) {
             return getMeshInfo().getFDSNodesByMeshAddress(nodeInfo.meshAddress)
         }
         return null
@@ -110,6 +132,9 @@
 
     //根据MAC地址获取指定节点
     override fun getFDSNodeInfoByMacAddress(macAddress: String): FDSNodeInfo? {
+        if (!AppIDVerification.instance.isVerificationPassed()) {
+            return null
+        }
         for (info in getMeshInfo().fdsNodes) {
             if (info.macAddress == macAddress) return info
         }
@@ -118,8 +143,11 @@
 
     //根据组地址获取组
     override fun getGroupByAddress(address: Int): FDSGroupInfo? {
-        for (groupInfo in getMeshInfo().groups){
-            if (address == groupInfo.address){
+        if (!AppIDVerification.instance.isVerificationPassed()) {
+            return null
+        }
+        for (groupInfo in getMeshInfo().groups) {
+            if (address == groupInfo.address) {
                 return groupInfo
             }
         }
@@ -128,8 +156,11 @@
 
     //修改节点名称
     override fun renameFDSNodeInfo(fdsNodeInfo: FDSNodeInfo, name: String, type: String): Boolean {
-        for (node in getMeshInfo().fdsNodes){
-            if (node.meshAddress == fdsNodeInfo.meshAddress){
+        if (!AppIDVerification.instance.isVerificationPassed()) {
+            return false
+        }
+        for (node in getMeshInfo().fdsNodes) {
+            if (node.meshAddress == fdsNodeInfo.meshAddress) {
                 node.name = name
                 if (!TextUtils.isEmpty(type)) {
                     node.type = type
@@ -142,6 +173,9 @@
 
     //创建组
     override fun createGroup(name: String): FDSGroupInfo {
+        if (!AppIDVerification.instance.isVerificationPassed()) {
+            return FDSGroupInfo()
+        }
         val fdsGroupInfo = getMeshInfo().createGroup(name)
         MeshApp.getInstance().saveOrUpdate()
         return fdsGroupInfo
@@ -149,8 +183,11 @@
 
     //重名了组
     override fun renameGroup(groupInfo: FDSGroupInfo, name: String): Boolean {
+        if (!AppIDVerification.instance.isVerificationPassed()) {
+            return false
+        }
         val group = getGroupByAddress(groupInfo.address)
-        if (group != null){
+        if (group != null) {
             group.name = name
             return MeshApp.getInstance().saveOrUpdate()
         }
@@ -159,10 +196,13 @@
 
     //删除组
     override fun removeGroup(groupInfo: FDSGroupInfo): Boolean {
+        if (!AppIDVerification.instance.isVerificationPassed()) {
+            return false
+        }
         val iterator = getMeshInfo().groups.iterator()
-        while (iterator.hasNext()){
+        while (iterator.hasNext()) {
             val group = iterator.next()
-            if (group.address == groupInfo.address){
+            if (group.address == groupInfo.address) {
                 iterator.remove()
             }
         }
@@ -176,10 +216,13 @@
         isSubscribe: Boolean,
         subscribeListener: (Boolean) -> Unit
     ) {
+        if (!AppIDVerification.instance.isVerificationPassed()) {
+            return
+        }
         val nodeInfo = getMeshInfo().getDeviceByMeshAddress(fdsNodeInfo.meshAddress)
-        if (nodeInfo != null){
+        if (nodeInfo != null) {
             meshNodeSub.setSubscribeListener(subscribeListener)
-            meshNodeSub.nodeSubscribeGroup(nodeInfo,groupInfo.address,isSubscribe)
+            meshNodeSub.nodeSubscribeGroup(nodeInfo, groupInfo.address, isSubscribe)
         } else {
             LOGUtils.e("configSubscribe() 不存在的设备地址 ${fdsNodeInfo.meshAddress}")
             subscribeListener(false)
@@ -188,6 +231,9 @@
 
     //刷新节点在线状态
     override fun refreshFDSNodeInfoState() {
+        if (!AppIDVerification.instance.isVerificationPassed()) {
+            return
+        }
         sendCmdUtils.refreshNodeInfoState()
     }
 
@@ -203,35 +249,53 @@
 
     //配置节点主动上报在线状态
     override fun configFDSNodePublishState(isOn: Boolean, fdsNodeInfo: FDSNodeInfo): Boolean {
+        if (!AppIDVerification.instance.isVerificationPassed()) {
+            return false
+        }
         val nodeInfo = getMeshInfo().getDeviceByMeshAddress(fdsNodeInfo.meshAddress)
-        if (nodeInfo != null){
-            return sendCmdUtils.configNodePublishState(isOn,nodeInfo)
+        if (nodeInfo != null) {
+            return sendCmdUtils.configNodePublishState(isOn, nodeInfo)
         }
         return false
     }
 
     //发送数据
-    override fun sendData(address: Int, data: ByteArray, responseOpcode: Int) {
-        sendCmdUtils.send(address,data,responseOpcode)
+    override fun sendData(address: Int, data: ByteArray, responseOpcode: Int): Boolean {
+        if (!AppIDVerification.instance.isVerificationPassed()) {
+            return false
+        }
+        return sendCmdUtils.send(address, data, responseOpcode)
     }
 
     //设置发送数据的响应数据回调
     override fun setResponseDataCallBack(fdsResponseCallBack: FDSResponseCallBack) {
+        if (!AppIDVerification.instance.isVerificationPassed()) {
+            return
+        }
         //sendCmdUtils.setResponseDataCallBack(fdsResponseCallBack)
     }
 
     //导入Json
     override fun importMeshJson(meshJson: String) {
+        if (!AppIDVerification.instance.isVerificationPassed()) {
+            return
+        }
         TODO("Not yet implemented")
     }
 
     //获取初始Mesh信息
     override fun getInitMeshJson(): String {
+        if (!AppIDVerification.instance.isVerificationPassed()) {
+            return ""
+        }
         TODO("Not yet implemented")
     }
 
     //获取当前Mesh信息
     override fun getCurrentMeshJson(): String {
+        if (!AppIDVerification.instance.isVerificationPassed()) {
+            return ""
+        }
         TODO("Not yet implemented")
     }
 
@@ -241,6 +305,9 @@
         fdsNodeInfo: FDSNodeInfo,
         callBack: FDSOTACallBack
     ): Boolean {
+        if (!AppIDVerification.instance.isVerificationPassed()) {
+            return false
+        }
         TODO("Not yet implemented")
     }
 
@@ -256,6 +323,9 @@
         fdsNodeInfo: FDSNodeInfo,
         callBack: FDSOTACallBack
     ): Boolean {
+        if (!AppIDVerification.instance.isVerificationPassed()) {
+            return false
+        }
         TODO("Not yet implemented")
     }
 
Index: app/src/main/java/com/linkiing/fdsmeshlibdemo/ui/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.linkiing.fdsmeshlibdemo.ui\r\n\r\nimport android.os.Bundle\r\nimport com.hjq.permissions.OnPermissionCallback\r\nimport com.linkiing.fdsmeshlibdemo.R\r\nimport com.linkiing.fdsmeshlibdemo.app.App\r\nimport com.linkiing.fdsmeshlibdemo.ui.base.BaseActivity\r\nimport com.linkiing.fdsmeshlibdemo.utils.PermissionsUtils\r\nimport com.telink.ble.mesh.util.LOGUtils\r\nimport kotlinx.android.synthetic.main.activity_main.*\r\n\r\nclass MainActivity : BaseActivity() {\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n\r\n        //初始化设备自动连接\r\n        App.getInstance().getMeshLogin().init()\r\n\r\n        lr_studio1.setOnClickListener {\r\n            //权限请求\r\n            PermissionsUtils.blePermissions(this, object : OnPermissionCallback {\r\n                override fun onGranted(permissions: MutableList<String>?, all: Boolean) {\r\n                    //权限申请成功\r\n                    goActivity(StudioActivity::class.java,false)\r\n                }\r\n\r\n                override fun onDenied(permissions: MutableList<String>?, never: Boolean) {\r\n                    super.onDenied(permissions, never)\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        LOGUtils.d(\"MainActivity onDestroy()\")\r\n\r\n        //销毁设备自动连接\r\n        App.getInstance().getMeshLogin().destroy()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/linkiing/fdsmeshlibdemo/ui/MainActivity.kt b/app/src/main/java/com/linkiing/fdsmeshlibdemo/ui/MainActivity.kt
--- a/app/src/main/java/com/linkiing/fdsmeshlibdemo/ui/MainActivity.kt	(revision ca3b242b2b9e931de28ad58599de73e77ce90824)
+++ b/app/src/main/java/com/linkiing/fdsmeshlibdemo/ui/MainActivity.kt	(date 1664180747322)
@@ -1,6 +1,8 @@
 package com.linkiing.fdsmeshlibdemo.ui
 
 import android.os.Bundle
+import com.godox.sdk.tool.AppIDVerification
+import com.godox.sdk.tool.HttpUtils
 import com.hjq.permissions.OnPermissionCallback
 import com.linkiing.fdsmeshlibdemo.R
 import com.linkiing.fdsmeshlibdemo.app.App
@@ -23,7 +25,7 @@
             PermissionsUtils.blePermissions(this, object : OnPermissionCallback {
                 override fun onGranted(permissions: MutableList<String>?, all: Boolean) {
                     //权限申请成功
-                    goActivity(StudioActivity::class.java,false)
+                    goActivity(StudioActivity::class.java, false)
                 }
 
                 override fun onDenied(permissions: MutableList<String>?, never: Boolean) {
@@ -31,6 +33,10 @@
                 }
             })
         }
+
+        bt_test.setOnClickListener {
+
+        }
     }
 
     override fun onDestroy() {
Index: app/src/main/java/com/linkiing/fdsmeshlibdemo/app/App.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.linkiing.fdsmeshlibdemo.app\r\n\r\nimport com.godox.sdk.MeshApp\r\nimport com.linkiing.fdsmeshlibdemo.utils.BleUtils\r\nimport com.telink.ble.mesh.util.CrashLogUtil\r\nimport com.telink.ble.mesh.util.LOGUtils\r\n\r\nclass App: MeshApp() {\r\n\r\n    companion object{\r\n        private lateinit var mThis: MeshApp\r\n        fun getInstance(): MeshApp {\r\n            return mThis\r\n        }\r\n    }\r\n\r\n    override fun onCreate() {\r\n        super.onCreate()\r\n        mThis = this\r\n\r\n        //保存SDK Crash日志\r\n        CrashLogUtil.instance.init(this)\r\n\r\n        //输出和保存SDK日志\r\n        LOGUtils.initSaveLog(this,true,true)\r\n\r\n        //BleUtils 初始化\r\n        BleUtils.instance.init(this)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/linkiing/fdsmeshlibdemo/app/App.kt b/app/src/main/java/com/linkiing/fdsmeshlibdemo/app/App.kt
--- a/app/src/main/java/com/linkiing/fdsmeshlibdemo/app/App.kt	(revision ca3b242b2b9e931de28ad58599de73e77ce90824)
+++ b/app/src/main/java/com/linkiing/fdsmeshlibdemo/app/App.kt	(date 1664180892823)
@@ -1,11 +1,13 @@
 package com.linkiing.fdsmeshlibdemo.app
 
 import com.godox.sdk.MeshApp
+import com.godox.sdk.api.FDSMeshApi
 import com.linkiing.fdsmeshlibdemo.utils.BleUtils
 import com.telink.ble.mesh.util.CrashLogUtil
 import com.telink.ble.mesh.util.LOGUtils
 
 class App: MeshApp() {
+    private val appId = "185BD3FB2532A7CE6BF4B2C15B8C27F06E0554779140BF726A929128FD0514BE"
 
     companion object{
         private lateinit var mThis: MeshApp
@@ -24,6 +26,9 @@
         //输出和保存SDK日志
         LOGUtils.initSaveLog(this,true,true)
 
+        //appId认证
+        FDSMeshApi.instance.setWithAppId(appId)
+
         //BleUtils 初始化
         BleUtils.instance.init(this)
     }
Index: FDSMeshLib/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    package=\"com.linkiing.fdsmeshlib\">\r\n\r\n    <uses-permission android:name=\"android.permission.BLUETOOTH_CONNECT\" />\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/FDSMeshLib/src/main/AndroidManifest.xml b/FDSMeshLib/src/main/AndroidManifest.xml
--- a/FDSMeshLib/src/main/AndroidManifest.xml	(revision ca3b242b2b9e931de28ad58599de73e77ce90824)
+++ b/FDSMeshLib/src/main/AndroidManifest.xml	(date 1664170782750)
@@ -1,6 +1,16 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
     package="com.linkiing.fdsmeshlib">
 
+    <uses-permission android:name="android.permission.INTERNET" />
     <uses-permission android:name="android.permission.BLUETOOTH_CONNECT" />
+
+    <application
+        android:usesCleartextTraffic="true"
+        android:networkSecurityConfig="@xml/network_security_config"
+        tools:targetApi="n">
+
+    </application>
+
 </manifest>
\ No newline at end of file
Index: FDSMeshLib/src/main/java/com.godox.sdk/api/FDSSearchDevicesApi.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.godox.sdk.api\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.content.Context\r\nimport android.text.TextUtils\r\nimport com.base.mesh.api.listener.ScanDeviceListener\r\nimport com.base.mesh.api.main.MeshScanDevice\r\nimport com.base.mesh.api.utils.ByteUtils\r\nimport com.godox.sdk.tool.DevicesUtils\r\nimport com.godox.sdk.callbacks.FDSBleDevCallBack\r\nimport com.telink.ble.mesh.entity.AdvertisingDevice\r\nimport com.telink.ble.mesh.util.LOGUtils\r\nimport com.telink.ble.mesh.util.PermissionUtils\r\n\r\n/**\r\n * 设备搜索\r\n */\r\nclass FDSSearchDevicesApi : ScanDeviceListener {\r\n    private var context: Context? = null\r\n    private val scanDevice = MeshScanDevice()\r\n    private var filterName = \"\"\r\n    private var callBack: FDSBleDevCallBack? = null\r\n\r\n    /**\r\n     * 扫描设备\r\n     * @param filterName 基于设备的localname进行过滤，传空默认不过滤\r\n     * @param scanOutTime 扫描超时时间\r\n     * @param callBack 蓝牙外设对象回调\r\n     */\r\n    fun startScanDevice(context: Context,filterName: String, scanOutTime: Long, callBack: FDSBleDevCallBack) {\r\n        this.context = context\r\n        this.filterName = filterName\r\n        this.callBack = callBack\r\n\r\n        if (!PermissionUtils.checkPermissionBle()){\r\n            LOGUtils.e(\"FDSSearchDevicesApi Error! FDSSearchDevices startScanDevice 缺少蓝牙相关权限！\")\r\n            return\r\n        }\r\n        LOGUtils.d(\"FDSSearchDevicesApi startScanDevice() filterName:$filterName\")\r\n        scanDevice.startScan(scanOutTime,this)\r\n    }\r\n\r\n    /**\r\n     * 停止扫描\r\n     */\r\n    fun stopScan() {\r\n        LOGUtils.d(\"FDSSearchDevicesApi stopScan()\")\r\n        scanDevice.stopScan()\r\n    }\r\n\r\n    @SuppressLint(\"MissingPermission\")\r\n    override fun onScanDevice(advertisingDevice: AdvertisingDevice) {\r\n        val bleDevice = advertisingDevice.device ?: return\r\n        val scanRecord = advertisingDevice.scanRecord ?: return\r\n        val devName = bleDevice.name\r\n\r\n        if (TextUtils.isEmpty(devName)){\r\n            return\r\n        }\r\n\r\n        if (!TextUtils.isEmpty(filterName)){\r\n            if (devName != filterName){\r\n                return\r\n            }\r\n        }\r\n\r\n        val type = DevicesUtils.getDeviceType(scanRecord)\r\n\r\n        LOGUtils.i(\"FDSSearchDevicesApi\" +\r\n                \"  ${advertisingDevice.device.address} \" +\r\n                \"  devName:$devName\" +\r\n                \"  type:$type\" +\r\n                \"  rssi:${advertisingDevice.rssi}  \" +\r\n                \"  scanRecord:${ByteUtils.toHexString(scanRecord)}\")\r\n\r\n        if (callBack != null){\r\n            callBack!!.onDeviceSearch(advertisingDevice,type)\r\n        }\r\n\r\n    }\r\n\r\n    override fun onScanTimeOut() {\r\n        if (callBack != null) {\r\n            callBack!!.onScanTimeOut()\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/FDSMeshLib/src/main/java/com.godox.sdk/api/FDSSearchDevicesApi.kt b/FDSMeshLib/src/main/java/com.godox.sdk/api/FDSSearchDevicesApi.kt
--- a/FDSMeshLib/src/main/java/com.godox.sdk/api/FDSSearchDevicesApi.kt	(revision ca3b242b2b9e931de28ad58599de73e77ce90824)
+++ b/FDSMeshLib/src/main/java/com.godox.sdk/api/FDSSearchDevicesApi.kt	(date 1664178454039)
@@ -8,6 +8,7 @@
 import com.base.mesh.api.utils.ByteUtils
 import com.godox.sdk.tool.DevicesUtils
 import com.godox.sdk.callbacks.FDSBleDevCallBack
+import com.godox.sdk.tool.AppIDVerification
 import com.telink.ble.mesh.entity.AdvertisingDevice
 import com.telink.ble.mesh.util.LOGUtils
 import com.telink.ble.mesh.util.PermissionUtils
@@ -32,6 +33,10 @@
         this.filterName = filterName
         this.callBack = callBack
 
+        if (!AppIDVerification.instance.isVerificationPassed()) {
+            return
+        }
+
         if (!PermissionUtils.checkPermissionBle()){
             LOGUtils.e("FDSSearchDevicesApi Error! FDSSearchDevices startScanDevice 缺少蓝牙相关权限！")
             return
Index: FDSMeshLib/src/main/java/com.godox.sdk/api/interfaces/FDSMeshInterface.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.godox.sdk.api.interfaces\r\n\r\nimport com.base.mesh.api.listener.NodeStatusChangeListener\r\nimport com.godox.sdk.callbacks.FDSOTACallBack\r\nimport com.godox.sdk.callbacks.FDSResponseCallBack\r\nimport com.godox.sdk.model.FDSNodeInfo\r\nimport com.godox.sdk.model.FDSGroupInfo\r\n\r\ninterface FDSMeshInterface {\r\n\r\n    /**\r\n     * 设置接入使用需要申请AppId\r\n     * @param appId 应用AppId\r\n     */\r\n    fun setWithAppId(appId: String)\r\n\r\n    /**\r\n     * 获取SDK版本号\r\n     * @return 版本x.x.x\r\n     */\r\n    fun getVersion(): String\r\n\r\n    /**\r\n     * 启用SDK日志\r\n     * @param isOpen true表示启用，false表示关闭\r\n     * @param isSave true表示保存日志，false表示不保存日志\r\n     */\r\n    fun initSdkLog(isOpen: Boolean, isSave: Boolean)\r\n\r\n    /**\r\n     * 获取节点列表\r\n     * @return 节点列表\r\n     */\r\n    fun getFDSNodes(): MutableList<FDSNodeInfo>\r\n\r\n    /**\r\n     * 获取组列表\r\n     * @return 组列表\r\n     */\r\n    fun getGroups(): MutableList<FDSGroupInfo>\r\n\r\n    /**\r\n     * 获取订阅组的设备节点列表\r\n     * @param address 组地址\r\n     * @return 节点列表\r\n     */\r\n    fun getGroupFDSNodes(address: Int): MutableList<FDSNodeInfo>\r\n\r\n    /**\r\n     * 获取未订阅组的节点列表\r\n     * @return 节点列表\r\n     */\r\n    fun getFDSNodeWhitOutGroup(): MutableList<FDSNodeInfo>\r\n\r\n    /**\r\n     * 获取直连节点\r\n     * @return 直连节点\r\n     */\r\n    fun getConnectedFDSNodeInfo(): FDSNodeInfo?\r\n\r\n    /**\r\n     * 根据MAC地址获取指定节点\r\n     * @param macAddress 节点MAC地址\r\n     * @return\r\n     */\r\n    fun getFDSNodeInfoByMacAddress(macAddress: String): FDSNodeInfo?\r\n\r\n    /**\r\n     * 根据组地址获取组\r\n     * @param address 组地址\r\n     * @return\r\n     */\r\n    fun getGroupByAddress(address: Int): FDSGroupInfo?\r\n\r\n    /**\r\n     * 重命名节点名称和类型\r\n     * @param fdsNodeInfo 节点\r\n     * @param name 节点名称\r\n     * @param type 节点类型\r\n     * @return true表示重命名成功，false表示重命名失败\r\n     */\r\n    fun renameFDSNodeInfo(fdsNodeInfo: FDSNodeInfo, name: String, type: String): Boolean\r\n\r\n    /**\r\n     * 创建组\r\n     * @param name 组名称\r\n     * @return true表示创建成功，false表示创建失败\r\n     */\r\n    fun createGroup(name: String): FDSGroupInfo\r\n\r\n    /**\r\n     * 重命名组\r\n     * @param groupInfo 组\r\n     * @param name 组名称\r\n     * @return true表示重命名成功，false表示重命名失败\r\n     */\r\n    fun renameGroup(groupInfo: FDSGroupInfo, name: String): Boolean\r\n\r\n    /**\r\n     * 移除组\r\n     * @param groupInfo 组\r\n     * @return true表示删除成功，false表示删除失败\r\n     */\r\n    fun removeGroup(groupInfo: FDSGroupInfo): Boolean\r\n\r\n    /**\r\n     * 配置节点“订阅/取消订阅”组\r\n     * @param fdsNodeInfo 节点\r\n     * @param groupInfo 组\r\n     * @param isSubscribe true表示订阅到组，false表示取消订阅\r\n     * @param subscribeListener true表示成功，false表示失败\r\n     */\r\n    fun configSubscribe(\r\n        fdsNodeInfo: FDSNodeInfo,\r\n        groupInfo: FDSGroupInfo,\r\n        isSubscribe: Boolean,\r\n        subscribeListener: (Boolean) -> Unit\r\n    )\r\n\r\n    /**\r\n     * 检测和刷新节点在线状态\r\n     */\r\n    fun refreshFDSNodeInfoState()\r\n\r\n    /**\r\n     * 设置节点在线状态改变的监听\r\n     */\r\n    fun addFDSNodeStatusChangeCallBack(fdsNodeStatusChangeListener: NodeStatusChangeListener)\r\n\r\n    /**\r\n     * 取消节点在线状态改变的监听\r\n     */\r\n    fun removeFDSNodeStatusChangeCallBack(fdsNodeStatusChangeListener: NodeStatusChangeListener)\r\n\r\n    /**\r\n     * 配置节点自动上报在线状态\r\n     * @param isOn true表示开启自动上报，false表示取消自动上报\r\n     * @param fdsNodeInfo 节点\r\n     */\r\n    fun configFDSNodePublishState(isOn: Boolean, fdsNodeInfo: FDSNodeInfo): Boolean\r\n\r\n    /**\r\n     * 发送消息数据\r\n     * @param address 发送地址\r\n     * @param data 消息数据\r\n     * @param responseOpcode 回响应操作码 - #{SendCmdUtils.RES_OPCODE_F0，SendCmdUtils.RES_OPCODE_F1}\r\n     */\r\n    fun sendData(address: Int, data: ByteArray, responseOpcode: Int)\r\n\r\n    /**\r\n     * 发送数据响应\r\n     * @param fdsResponseCallBack 发送数据响应回调\r\n     */\r\n    fun setResponseDataCallBack(fdsResponseCallBack: FDSResponseCallBack)\r\n\r\n    /**\r\n     * 导入/替换Mesh信息\r\n     * @param meshJson 组网JSON信息\r\n     */\r\n    fun importMeshJson(meshJson: String)\r\n\r\n    /**\r\n     * 获取初始Mesh信息（新增场景时需要）\r\n     * @return Mesh Json字符串\r\n     */\r\n    fun getInitMeshJson(): String\r\n\r\n    /**\r\n     * 获取当前Mesh信息（保存或分享场景时需要）\r\n     * @return Mesh Json字符串\r\n     */\r\n    fun getCurrentMeshJson(): String\r\n\r\n    /**\r\n     * 开启OTA升级\r\n     * @param otaData 固件数据\r\n     * @param fdsNodeInfo 节点\r\n     * @param callBack OTA升级回调\r\n     * @return true表示开启成功，false表示开启失败\r\n     */\r\n    fun startOTAWithOtaData(\r\n        otaData: ByteArray?,\r\n        fdsNodeInfo: FDSNodeInfo,\r\n        callBack: FDSOTACallBack\r\n    ): Boolean\r\n\r\n    /**\r\n     * 结束OTA升级\r\n     */\r\n    fun stopOTA()\r\n\r\n    /**\r\n     * 开启MCU OTA升级\r\n     * @param otaData 固件数据\r\n     * @param version 固件版本\r\n     * @param fdsNodeInfo 节点\r\n     * @param callBack MCU OTA升级回调\r\n     * @return  true表示开启成功，false表示开启失败\r\n     */\r\n    fun startMcuOTAWithOtaData(\r\n        otaData: ByteArray,\r\n        version: Int,\r\n        fdsNodeInfo: FDSNodeInfo,\r\n        callBack: FDSOTACallBack\r\n    ): Boolean\r\n\r\n    /**\r\n     * 结束MCU OTA升级\r\n     */\r\n    fun stopMcuOTA()\r\n\r\n    /**\r\n     * 销毁并释放资源\r\n     */\r\n    fun destroy()\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/FDSMeshLib/src/main/java/com.godox.sdk/api/interfaces/FDSMeshInterface.kt b/FDSMeshLib/src/main/java/com.godox.sdk/api/interfaces/FDSMeshInterface.kt
--- a/FDSMeshLib/src/main/java/com.godox.sdk/api/interfaces/FDSMeshInterface.kt	(revision ca3b242b2b9e931de28ad58599de73e77ce90824)
+++ b/FDSMeshLib/src/main/java/com.godox.sdk/api/interfaces/FDSMeshInterface.kt	(date 1664178454004)
@@ -145,7 +145,7 @@
      * @param data 消息数据
      * @param responseOpcode 回响应操作码 - #{SendCmdUtils.RES_OPCODE_F0，SendCmdUtils.RES_OPCODE_F1}
      */
-    fun sendData(address: Int, data: ByteArray, responseOpcode: Int)
+    fun sendData(address: Int, data: ByteArray, responseOpcode: Int): Boolean
 
     /**
      * 发送数据响应
Index: FDSMeshLib/src/main/java/com.godox.sdk/api/FDSAddOrRemoveDeviceApi.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.godox.sdk.api\r\n\r\nimport android.app.Activity\r\nimport com.base.mesh.api.main.MeshInNetwork\r\nimport com.base.mesh.api.main.MeshOutNetwork\r\nimport com.base.mesh.api.model.NodeInfo\r\nimport com.godox.sdk.tool.DevicesUtils\r\nimport com.godox.sdk.MeshApp\r\nimport com.godox.sdk.callbacks.FDSAddNetWorkCallBack\r\nimport com.godox.sdk.callbacks.FDSRemoveNodeCallBack\r\nimport com.godox.sdk.model.FDSNodeInfo\r\nimport com.telink.ble.mesh.entity.AdvertisingDevice\r\n\r\n/**\r\n * 设备入网 和 退网\r\n */\r\nclass FDSAddOrRemoveDeviceApi(activity: Activity) {\r\n    private val meshInNetwork = MeshInNetwork(activity)\r\n    private val meshOutNetwork = MeshOutNetwork()\r\n    private var fdsAddNetworkCallBack: FDSAddNetWorkCallBack? = null\r\n    private var fdsRemoveNodeCallBack: FDSRemoveNodeCallBack? = null\r\n\r\n    init {\r\n\r\n        //入网Listener\r\n        meshInNetwork.setInNetworkListener { isSuccess, nodeAndScanRecords ->\r\n            val list = mutableListOf<FDSNodeInfo>()\r\n            if (nodeAndScanRecords.isNotEmpty()) {\r\n                for (nodeAndScanRecord in nodeAndScanRecords) {\r\n                    val fdsNodeInfo = FDSNodeInfo(nodeAndScanRecord.nodeInfo)\r\n                    fdsNodeInfo.type = DevicesUtils.getDeviceType(nodeAndScanRecord.scanRecord)\r\n                    MeshApp.getInstance().getMeshInfo().fdsNodes.add(fdsNodeInfo)\r\n\r\n                    list.add(fdsNodeInfo)\r\n                }\r\n                MeshApp.getInstance().saveOrUpdate()\r\n            }\r\n            fdsAddNetworkCallBack?.onComplete(isSuccess, list)\r\n        }\r\n\r\n        //退网Listener\r\n        meshOutNetwork.setOutNetworkListener { isSuccess, nodeList ->\r\n            val list = mutableListOf<FDSNodeInfo>()\r\n            if (nodeList.isNotEmpty()) {\r\n                for (nodeInfo in nodeList) {\r\n                    val fdsNodeInfo = MeshApp.getInstance().getMeshInfo()\r\n                        .getFDSNodesByMeshAddress(nodeInfo.meshAddress)\r\n                    if (fdsNodeInfo != null) {\r\n                        MeshApp.getInstance().getMeshInfo().removeFDSNodeInfo(fdsNodeInfo)\r\n\r\n                        list.add(fdsNodeInfo)\r\n                    }\r\n                }\r\n                MeshApp.getInstance().saveOrUpdate()\r\n            }\r\n            fdsRemoveNodeCallBack?.onComplete(isSuccess,list)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设备组网\r\n     * @param advertisingDevice 蓝牙外设对象\r\n     * @param fdsAddNetworkCallBack 组网回调\r\n     */\r\n    fun deviceAddNetWork(\r\n        advertisingDevice: AdvertisingDevice,\r\n        fdsAddNetworkCallBack: FDSAddNetWorkCallBack\r\n    ) {\r\n        this.fdsAddNetworkCallBack = fdsAddNetworkCallBack\r\n        meshInNetwork.startInNetwork(advertisingDevice)\r\n    }\r\n\r\n    fun deviceAddNetWork(\r\n        advertisingDeviceList: MutableList<AdvertisingDevice>,\r\n        fdsAddNetworkCallBack: FDSAddNetWorkCallBack\r\n    ) {\r\n        this.fdsAddNetworkCallBack = fdsAddNetworkCallBack\r\n        meshInNetwork.startInNetwork(advertisingDeviceList)\r\n    }\r\n\r\n    /**\r\n     * 移除节点(退网)\r\n     * @param fdsNodeInfo 节点\r\n     * @param isSupportOutOfLine 是否支持删除离线节点\r\n     * @param fdsRemoveNodeCallBack true表示删除成功，false表示删除失败\r\n     */\r\n    fun deviceRemoveNetWork(\r\n        fdsNodeInfo: FDSNodeInfo,\r\n        isSupportOutOfLine: Boolean,\r\n        fdsRemoveNodeCallBack: FDSRemoveNodeCallBack\r\n    ) {\r\n        this.fdsRemoveNodeCallBack = fdsRemoveNodeCallBack\r\n        val nodeInfo =\r\n            MeshApp.getInstance().getMeshInfo().getDeviceByMeshAddress(fdsNodeInfo.meshAddress)\r\n        if (nodeInfo != null) {\r\n            meshOutNetwork.kickOut(nodeInfo)\r\n        }\r\n    }\r\n\r\n    fun deviceRemoveNetWork(\r\n        fdsNodeInfoList: MutableList<FDSNodeInfo>,\r\n        isSupportOutOfLine: Boolean,\r\n        fdsRemoveNodeCallBack: FDSRemoveNodeCallBack\r\n    ) {\r\n        this.fdsRemoveNodeCallBack = fdsRemoveNodeCallBack\r\n        val nodeList = mutableListOf<NodeInfo>()\r\n        for (fdsNodeInfo in fdsNodeInfoList) {\r\n            val nodeInfo =\r\n                MeshApp.getInstance().getMeshInfo().getDeviceByMeshAddress(fdsNodeInfo.meshAddress)\r\n            if (nodeInfo != null) {\r\n                nodeList.add(nodeInfo)\r\n            }\r\n        }\r\n        meshOutNetwork.kickOut(nodeList)\r\n    }\r\n\r\n    /**\r\n     * 销毁资源\r\n     */\r\n    fun destroy() {\r\n        meshInNetwork.destroy()\r\n        meshOutNetwork.destroy()\r\n        fdsAddNetworkCallBack = null\r\n        fdsRemoveNodeCallBack = null\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/FDSMeshLib/src/main/java/com.godox.sdk/api/FDSAddOrRemoveDeviceApi.kt b/FDSMeshLib/src/main/java/com.godox.sdk/api/FDSAddOrRemoveDeviceApi.kt
--- a/FDSMeshLib/src/main/java/com.godox.sdk/api/FDSAddOrRemoveDeviceApi.kt	(revision ca3b242b2b9e931de28ad58599de73e77ce90824)
+++ b/FDSMeshLib/src/main/java/com.godox.sdk/api/FDSAddOrRemoveDeviceApi.kt	(date 1664178453996)
@@ -9,7 +9,9 @@
 import com.godox.sdk.callbacks.FDSAddNetWorkCallBack
 import com.godox.sdk.callbacks.FDSRemoveNodeCallBack
 import com.godox.sdk.model.FDSNodeInfo
+import com.godox.sdk.tool.AppIDVerification
 import com.telink.ble.mesh.entity.AdvertisingDevice
+import com.telink.ble.mesh.util.LOGUtils
 
 /**
  * 设备入网 和 退网
@@ -66,6 +68,9 @@
         advertisingDevice: AdvertisingDevice,
         fdsAddNetworkCallBack: FDSAddNetWorkCallBack
     ) {
+        if (!AppIDVerification.instance.isVerificationPassed()) {
+            return
+        }
         this.fdsAddNetworkCallBack = fdsAddNetworkCallBack
         meshInNetwork.startInNetwork(advertisingDevice)
     }
@@ -74,6 +79,9 @@
         advertisingDeviceList: MutableList<AdvertisingDevice>,
         fdsAddNetworkCallBack: FDSAddNetWorkCallBack
     ) {
+        if (!AppIDVerification.instance.isVerificationPassed()) {
+            return
+        }
         this.fdsAddNetworkCallBack = fdsAddNetworkCallBack
         meshInNetwork.startInNetwork(advertisingDeviceList)
     }
@@ -89,6 +97,9 @@
         isSupportOutOfLine: Boolean,
         fdsRemoveNodeCallBack: FDSRemoveNodeCallBack
     ) {
+        if (!AppIDVerification.instance.isVerificationPassed()) {
+            return
+        }
         this.fdsRemoveNodeCallBack = fdsRemoveNodeCallBack
         val nodeInfo =
             MeshApp.getInstance().getMeshInfo().getDeviceByMeshAddress(fdsNodeInfo.meshAddress)
@@ -102,6 +113,9 @@
         isSupportOutOfLine: Boolean,
         fdsRemoveNodeCallBack: FDSRemoveNodeCallBack
     ) {
+        if (!AppIDVerification.instance.isVerificationPassed()) {
+            return
+        }
         this.fdsRemoveNodeCallBack = fdsRemoveNodeCallBack
         val nodeList = mutableListOf<NodeInfo>()
         for (fdsNodeInfo in fdsNodeInfoList) {
Index: FDSMeshLib/src/main/res/xml/network_security_config.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/FDSMeshLib/src/main/res/xml/network_security_config.xml b/FDSMeshLib/src/main/res/xml/network_security_config.xml
new file mode 100644
--- /dev/null	(date 1664170719441)
+++ b/FDSMeshLib/src/main/res/xml/network_security_config.xml	(date 1664170719441)
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<network-security-config xmlns:tools="http://schemas.android.com/tools">
+    <base-config cleartextTrafficPermitted="true"
+        tools:ignore="InsecureBaseConfiguration" />
+</network-security-config>
\ No newline at end of file
Index: FDSMeshLib/src/main/java/com.godox.sdk/api/FDSCommandApi.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.godox.sdk.api\r\n\r\nimport com.godox.sdk.bean.FDSColorBlockBean\r\nimport com.godox.sdk.callbacks.FDSBatteryPowerCallBack\r\nimport com.godox.sdk.callbacks.FDSFirmwareCallBack\r\nimport com.godox.sdk.callbacks.FDSMCUCallBack\r\nimport com.godox.sdk.tool.CRC8Util\r\nimport com.godox.sdk.tool.send.SendCmdUtils\r\nimport com.telink.ble.mesh.util.LOGUtils\r\n\r\nclass FDSCommandApi {\r\n    private var tag = \"FDSCommandApi\"\r\n    private val sendCmdUtils = SendCmdUtils.instance\r\n\r\n    /**\r\n     * 获取固件版本\r\n     * @param address 设备地址\r\n     * @param fdsFirmwareCallBack 固件版本回调\r\n     */\r\n    fun getFirmwareVersion(address: Int, fdsFirmwareCallBack: FDSFirmwareCallBack) {\r\n        sendCmdUtils.sendDataListener.setFDSFirmwareCallBack(fdsFirmwareCallBack)\r\n        val bytes = byteArrayOf(0x02)\r\n        sendAgreementDataV1(0xFD,0xFF,bytes,address,true)\r\n    }\r\n\r\n    /**\r\n     * 获取MCU固件版本\r\n     *\r\n     * @param address 设备地址\r\n     * @param fdsMCUCallBack MCU版本回调\r\n     */\r\n    fun getMcuVersion(address: Int, fdsMCUCallBack: FDSMCUCallBack) {\r\n        sendCmdUtils.sendDataListener.setFDSMCUCallBack(fdsMCUCallBack)\r\n        val bytes = byteArrayOf(0x03)\r\n        sendAgreementDataV1(0xFD,0xFF,bytes,address,true)\r\n    }\r\n\r\n    /**\r\n     * 获取设备电量\r\n     *\r\n     * @param address 设备地址\r\n     * @param fdsBatteryPowerCallBack 电量回调\r\n     */\r\n    fun getBatteryPower(address: Int, fdsBatteryPowerCallBack: FDSBatteryPowerCallBack) {\r\n        sendCmdUtils.sendDataListener.setFDSBatteryPowerCallBack(fdsBatteryPowerCallBack)\r\n        val bytes = byteArrayOf(0x03)\r\n        sendAgreementDataV1(0xFD,0xA6,bytes,address,true)\r\n    }\r\n\r\n    /**\r\n     * 控制设备开关灯\r\n     *\r\n     * @param address 设备地址\r\n     * @param isSwitch true表示开灯，false表示关灯\r\n     */\r\n    fun changeLightSwitch(address: Int, isSwitch: Boolean) {\r\n        //TODO\r\n    }\r\n\r\n    /**\r\n     * 控制设备风扇\r\n     *\r\n     * @param address 设备地址\r\n     * @param mode 模式：0-关 1-智能（自动) 2-手动\r\n     * @param speed 速度：模式为2的情况下，0-低速 1-中转速 2-高速 3-静音\r\n     */\r\n    fun changeElectricFan(address: Int, mode: Int, speed: Int) {\r\n        //TODO\r\n    }\r\n\r\n    /**\r\n     * 控制亮度偏移\r\n     *\r\n     * @param address 设备地址\r\n     * @param brightness 偏移亮度 (-100)-(+100)\r\n     * @param brightness_point 小数点后偏移亮度 0-9\r\n     */\r\n    fun changeBrightnessOffset(address: Int, brightness: Int, brightness_point: Int) {\r\n        //TODO\r\n    }\r\n\r\n    /**\r\n     * 修改灯光RGBW - 支持V2\r\n     *\r\n     * @param address 设备地址\r\n     * @param brightness 亮度 0-100\r\n     * @param brightness_point 小数点后亮度 0-9\r\n     * @param red 红 0-255\r\n     * @param green 绿 0-255\r\n     * @param blue 蓝 0-255\r\n     * @param white 白 0-255\r\n     */\r\n    fun changeLightRGBW(\r\n        address: Int, brightness: Int, brightness_point: Int,\r\n        red: Int, green: Int, blue: Int, white: Int\r\n    ) {\r\n        //TODO\r\n    }\r\n\r\n    /**\r\n     * 修改灯光RGBW - 支持V3\r\n     *\r\n     * @param address 设备地址\r\n     * @param brightness 亮度 0-100\r\n     * @param brightness_point 小数点后亮度 0-9\r\n     * @param type 0-RGBW 1-RGBWW 2-RGBACL\r\n     * @param red 红 0-255\r\n     * @param green 绿 0-255\r\n     * @param blue 蓝 0-255\r\n     * @param color1 白色/琥珀色 0-255\r\n     * @param color2 暖白/青色 0-255\r\n     * @param color3 青宁色 0-255\r\n     */\r\n    fun changeLightRGBWEx(\r\n        address: Int, brightness: Int, brightness_point: Int,\r\n        type: Int, red: Int, green: Int, blue: Int,\r\n        color1: Int, color2: Int, color3: Int\r\n    ) {\r\n        //TODO\r\n    }\r\n\r\n    /**\r\n     * 修改灯光CCT\r\n     *\r\n     * @param address 设备地址\r\n     * @param brightness 亮度 0-100\r\n     * @param brightness_point 小数点后亮度 0-9\r\n     * @param temperature 色温\r\n     * @param gm gm\r\n     * @param circle 曲线模式 0-线性 1-S曲线 2-指数 3-对数\r\n     * @param mode 显示模式 0-CCT 1-色温库 2-智能补光\r\n     */\r\n    fun changeLightCCT(\r\n        address: Int, brightness: Int, brightness_point: Int,\r\n        temperature: Int, gm: Int, circle: Int, mode: Int\r\n    ) {\r\n        //TODO\r\n    }\r\n\r\n    /**\r\n     * 修改灯光HSI\r\n     *\r\n     * @param address 设备地址\r\n     * @param brightness 亮度 0-100\r\n     * @param brightness_point 小数点后亮度 0-9\r\n     * @param hue 色相 0-360\r\n     * @param sat 饱和度 0-100\r\n     * @param mode 显示模式 0-HSI 1-拾色器\r\n     */\r\n    fun changeLightHSI(\r\n        address: Int, brightness: Int, brightness_point: Int,\r\n        hue: Int, sat: Int, mode: Int\r\n    ) {\r\n        //TODO\r\n    }\r\n\r\n    /**\r\n     * 修改灯光色卡 - 支持V2\r\n     *\r\n     * @param address 设备地址\r\n     * @param brightness 亮度 0-100\r\n     * @param brightness_point 小数点后亮度 0-9\r\n     * @param brand 品牌 0-rosco 1-lee\r\n     * @param number 编号 0-255\r\n     * @param hue 色相微调 (-20)-(+20)\r\n     * @param sat 饱和度微调 (-20)-(+20)\r\n     */\r\n    fun changeLightCard(\r\n        address: Int, brightness: Int, brightness_point: Int,\r\n        brand: Int, number: Int, hue: Int, sat: Int\r\n    ) {\r\n        //TODO\r\n    }\r\n\r\n    /**\r\n     * 修改灯光色卡 - 支持V3\r\n     *\r\n     * @param address 设备地址\r\n     * @param brightness 亮度 0-100\r\n     * @param brightness_point 小数点后亮度 0-9\r\n     * @param brand 品牌 0-rosco 1-lee\r\n     * @param number 编号 0-255\r\n     * @param temperature 0-3200K 1-5600K\r\n     * @param hue 色相微调 (-20)-(+20) 值为 0-40\r\n     * @param sat 饱和度微调 (-20)-(+20) 值为 0-40\r\n     */\r\n    fun changeLightCardEx(\r\n        address: Int, brightness: Int, brightness_point: Int,\r\n        brand: Int, number: Int, temperature: Int, hue: Int, sat: Int\r\n    ) {\r\n        //TODO\r\n    }\r\n\r\n\r\n    /**\r\n     * 修改灯光XY - 支持V3\r\n     *\r\n     * @param address 设备地址\r\n     * @param brightness 亮度 0-100\r\n     * @param brightness_point 小数点后亮度 0-9\r\n     * @param X 0.xxxx的小数点后四位，需要转为整型\r\n     * @param Y 0.xxxx的小数点后四位，需要转为整型\r\n     */\r\n    fun changeLightXY(address: Int, brightness: Int, brightness_point: Int, X: Int, Y: Int) {\r\n        //TODO\r\n    }\r\n\r\n    /**\r\n     * 修改灯光特效\r\n     *\r\n     * @param address 设备地址\r\n     * @param brightness 亮度 0-100\r\n     * @param brightness_point 小数点后亮度 0-9\r\n     * @param symbol 底层唯一标识 0-13\r\n     * @param speed 速度档位 0,1,2\r\n     */\r\n    fun changeLightFX(\r\n        address: Int, brightness: Int, brightness_point: Int,\r\n        symbol: Int, speed: Int\r\n    ) {\r\n        //TODO\r\n    }\r\n\r\n    /**\r\n     * 修改灯光特效 - 闪光灯\r\n     *\r\n     * @param address 设备地址\r\n     * @param brightness 亮度 0-100\r\n     * @param brightness_point 小数点后亮度 0-9\r\n     * @param speed 速度 1-100\r\n     * @param trigger 触发方式 0-自动 1-手动\r\n     * @param mode 模式 0-闪光灯 1-镁光灯\r\n     * @param option 选项 0-CCT 1-HSI\r\n     * @param optionValue 选项option为0时传色温（0-255/单位100K），option为1时传色相（0-360）\r\n     * @param gm gm值\r\n     */\r\n    fun changeLightFXFlash(\r\n        address: Int, brightness: Int, brightness_point: Int,\r\n        speed: Int, trigger: Int, mode: Int, option: Int, optionValue: Int, gm: Int\r\n    ) {\r\n        //TODO\r\n    }\r\n\r\n    /**\r\n     * 修改灯光特效 - 雷闪电\r\n     *\r\n     * @param address 设备地址\r\n     * @param brightness 亮度 0-100\r\n     * @param brightness_point 小数点后亮度 0-9\r\n     * @param frequency 频率 2-60次/分钟；随机：0\r\n     * @param trigger 触发方式 0-自动 1-手动\r\n     * @param twinkling 闪烁次数 1-10；随机：0\r\n     * @param temperature 色温 0-255/单位100K\r\n     */\r\n    fun changeLightFXLightning(\r\n        address: Int, brightness: Int, brightness_point: Int,\r\n        frequency: Int, trigger: Int, twinkling: Int, temperature: Int\r\n    ) {\r\n        //TODO\r\n    }\r\n\r\n    /**\r\n     * 修改灯光特效 - 多云\r\n     *\r\n     * @param address 设备地址\r\n     * @param brightness 亮度 0-100\r\n     * @param brightness_point 小数点后亮度 0-9\r\n     * @param speed 速度 1-100 随机-0\r\n     * @param lightDark 亮暗比例 10-90%\r\n     */\r\n    fun changeLightFXCloudy(\r\n        address: Int, brightness: Int, brightness_point: Int,\r\n        speed: Int, lightDark: Int\r\n    ) {\r\n        //TODO\r\n    }\r\n\r\n    /**\r\n     * 修改灯光特效 - 坏灯泡\r\n     *\r\n     * @param address 设备地址\r\n     * @param brightness 亮度 0-100\r\n     * @param brightness_point 小数点后亮度 0-9\r\n     * @param speed 速度 1-100\r\n     * @param option 选项 0-CCT 1-HSI\r\n     * @param optionValue 选项option为0时传色温（0-255/单位100K），option为1时传色相（0-360）\r\n     * @param gm gm值\r\n     */\r\n    fun changeLightFXBrokenBulb(\r\n        address: Int, brightness: Int, brightness_point: Int,\r\n        speed: Int, option: Int, optionValue: Int, gm: Int\r\n    ) {\r\n        //TODO\r\n    }\r\n\r\n    /**\r\n     * 修改灯光特效 - 电视机\r\n     *\r\n     * @param address 设备地址\r\n     * @param brightness 亮度 0-100\r\n     * @param brightness_point 小数点后亮度 0-9\r\n     * @param speed 速度 1-100\r\n     * @param option 选项 0-CCT 1-HSI\r\n     */\r\n    fun changeLightFXTV(\r\n        address: Int, brightness: Int, brightness_point: Int,\r\n        speed: Int, option: Int\r\n    ) {\r\n        //TODO\r\n    }\r\n\r\n    /**\r\n     * 修改灯光特效 - 蜡烛\r\n     *\r\n     * @param address 设备地址\r\n     * @param brightness 亮度 0-100\r\n     * @param brightness_point 小数点后亮度 0-9\r\n     * @param speed 速度 1-100\r\n     */\r\n    fun changeLightFXCandle(address: Int, brightness: Int, brightness_point: Int, speed: Int) {\r\n        //TODO\r\n    }\r\n\r\n    /**\r\n     * 修改灯光特效 - 火\r\n     *\r\n     * @param address 设备地址\r\n     * @param brightness 亮度 0-100\r\n     * @param brightness_point 小数点后亮度 0-9\r\n     * @param speed 速度 1-100\r\n     */\r\n    fun changeLightFXFire(address: Int, brightness: Int, brightness_point: Int, speed: Int) {\r\n        //TODO\r\n    }\r\n\r\n    /**\r\n     * 修改灯光特效 - 烟花\r\n     *\r\n     * @param address 设备地址\r\n     * @param brightness 亮度 0-100\r\n     * @param brightness_point 小数点后亮度 0-9\r\n     * @param speed 速度 1-100\r\n     * @param ember 余烬 1-100\r\n     */\r\n    fun changeLightFXFirework(\r\n        address: Int, brightness: Int, brightness_point: Int,\r\n        speed: Int, ember: Int\r\n    ) {\r\n        //TODO\r\n    }\r\n\r\n    /**\r\n     * 修改灯光特效 - 爆炸\r\n     *\r\n     * @param address 设备地址\r\n     * @param brightness 亮度 0-100\r\n     * @param brightness_point 小数点后亮度 0-9\r\n     * @param speed 速度 1-100\r\n     * @param ember 余烬 1-100\r\n     * @param trigger 触发方式 0-自动 1-手动\r\n     * @param option 选项 0-CCT 1-HSI\r\n     * @param optionValue 选项option为0时传色温（0-255/单位100K），option为1时传色相（0-360）\r\n     * @param gm gm值\r\n     */\r\n    fun changeLightFXExplode(\r\n        address: Int, brightness: Int, brightness_point: Int,\r\n        speed: Int, ember: Int, trigger: Int, option: Int, optionValue: Int, gm: Int\r\n    ) {\r\n        //TODO\r\n    }\r\n\r\n\r\n    /**\r\n     * 修改灯光特效 - 焊接\r\n     *\r\n     * @param address 设备地址\r\n     * @param brightness 亮度 0-100\r\n     * @param brightnessPoint 小数点后亮度 0-9\r\n     * @param speed 速度 1-100\r\n     * @param option 选项 0-CCT 1-HSI\r\n     * @param optionValue 选项option为0时传色温（0-255/单位100K），option为1时传色相（0-360）\r\n     * @param gm gm值\r\n     */\r\n    fun changeLightFXWelding(\r\n        address: Int, brightness: Int, brightnessPoint: Int,\r\n        speed: Int, option: Int, optionValue: Int?, gm: Int?\r\n    ) {\r\n        //TODO\r\n    }\r\n\r\n    /**\r\n     * 修改灯光特效 - 警车\r\n     *\r\n     * @param address 设备地址\r\n     * @param brightness 亮度 0-100\r\n     * @param brightness_point 小数点后亮度 0-9\r\n     * @param speed 速度 1-100\r\n     * @param color 颜色组合 0-7\r\n     */\r\n    fun changeLightFXPoliceCar(\r\n        address: Int, brightness: Int, brightness_point: Int,\r\n        speed: Int, color: Int\r\n    ) {\r\n        //TODO\r\n    }\r\n\r\n    /**\r\n     * 修改灯光特效 - SOS\r\n     *\r\n     * @param address 设备地址\r\n     * @param brightness 亮度 0-100\r\n     * @param brightness_point 小数点后亮度 0-9\r\n     * @param option 选项 0-CCT 1-HSI\r\n     * @param optionValue 选项option为0时传色温（0-255/单位100K），option为1时传色相（0-360）\r\n     * @param gm gm值\r\n     */\r\n    fun changeLightFXSOS(\r\n        address: Int, brightness: Int, brightness_point: Int,\r\n        option: Int, optionValue: Int, gm: Int\r\n    ) {\r\n        //TODO\r\n    }\r\n\r\n    /**\r\n     * 修改灯光特效 - 彩光循环\r\n     *\r\n     * @param address 设备地址\r\n     * @param brightness 亮度 0-100\r\n     * @param brightness_point 小数点后亮度 0-9\r\n     * @param speed 速度 1-100\r\n     * @param sat 饱和度 0-100\r\n     */\r\n    fun changeLightFXRGBCycle(\r\n        address: Int, brightness: Int, brightness_point: Int,\r\n        speed: Int, sat: Int\r\n    ) {\r\n        //TODO\r\n    }\r\n\r\n    /**\r\n     * 修改灯光特效 - 激光彩灯\r\n     *\r\n     * @param address 设备地址\r\n     * @param brightness 亮度 0-100\r\n     * @param brightness_point 小数点后亮度 0-9\r\n     * @param speed 速度 1-100\r\n     * @param sat 饱和度 0-100\r\n     */\r\n    fun changeLightFXLaser(\r\n        address: Int, brightness: Int, brightness_point: Int,\r\n        speed: Int, sat: Int\r\n    ) {\r\n        //TODO\r\n    }\r\n\r\n    /**\r\n     * 修改灯光特效 - 彩光渐入\r\n     *\r\n     * @param address 设备地址\r\n     * @param brightness 亮度 0-100\r\n     * @param brightness_point 小数点后亮度 0-9\r\n     * @param speed 速度 1-100\r\n     * @param direction 方向 0-向左 1-向右 2-双向\r\n     * @param colorLength 颜色长度 1-8\r\n     * @param backgroundModel 背景色\r\n     * @param colorBlockList 色块属性列表\r\n     */\r\n    fun changeLightFXRGBFadeIn(\r\n        address: Int,\r\n        brightness: Int,\r\n        brightness_point: Int,\r\n        speed: Int,\r\n        direction: Int,\r\n        colorLength: Int,\r\n        backgroundModel: FDSColorBlockBean,\r\n        colorBlockList: List<FDSColorBlockBean>\r\n    ) {\r\n        //TODO\r\n    }\r\n\r\n    /**\r\n     * 修改灯光特效 - 彩光流动\r\n     *\r\n     * @param address 设备地址\r\n     * @param brightness 亮度 0-100\r\n     * @param brightness_point 小数点后亮度 0-9\r\n     * @param speed 速度 1-100\r\n     * @param direction 方向 0-向左 1-向右 2-双向\r\n     * @param colorLength 颜色长度 1-8\r\n     * @param colorBlockList 色块属性列表\r\n     */\r\n    fun changeLightFXRGBFlow(\r\n        address: Int, brightness: Int, brightness_point: Int,\r\n        speed: Int, direction: Int, colorLength: Int, colorBlockList: List<FDSColorBlockBean>\r\n    ) {\r\n        //TODO\r\n    }\r\n\r\n    /**\r\n     * 修改灯光特效 - 彩光追逐\r\n     *\r\n     * @param address 设备地址\r\n     * @param brightness 亮度 0-100\r\n     * @param brightness_point 小数点后亮度 0-9\r\n     * @param speed 速度 1-100\r\n     * @param direction 方向 0-向左 1-向右 2-双向\r\n     * @param mode 模式 0-渐变 1-闪烁 2-静止\r\n     * @param colorLength 颜色长度 1-8\r\n     * @param colorBlockList 色块属性列表\r\n     */\r\n    fun changeLightFXRGBChase(\r\n        address: Int,\r\n        brightness: Int,\r\n        brightness_point: Int,\r\n        speed: Int,\r\n        direction: Int,\r\n        mode: Int,\r\n        colorLength: Int,\r\n        colorBlockList: List<FDSColorBlockBean>\r\n    ) {\r\n        //TODO\r\n    }\r\n\r\n\r\n    /**\r\n     * 滑竿滑动过程中，是否能够修改设备灯光数据\r\n     * （滑竿滑动过程中使用该接口判断可以避免设备丢包，提高同步率）\r\n     *\r\n     * @return true表示可以修改，false表示不能修改\r\n     */\r\n    fun isEnableChangeData(): Boolean {\r\n        //TODO\r\n\r\n        return false\r\n    }\r\n\r\n    /***********************************************************************************************\r\n     ************************************* private  ************************************************\r\n     **********************************************************************************************/\r\n\r\n    /**\r\n     * V1协议数据封装\r\n     * @param model Model\r\n     * @param endBytes 第6字节，crc后面的一个字节\r\n     * @param data 数据 6字节\r\n     * @param address 节点地址或组地址\r\n     * @param isResponse 是否响应\r\n     */\r\n    private fun sendAgreementDataV1(\r\n        model: Int,\r\n        endBytes: Int,\r\n        data: ByteArray,\r\n        address: Int,\r\n        isResponse: Boolean\r\n    ): Boolean {\r\n        if (data.isEmpty() || data.size > 6) {\r\n            LOGUtils.e(\"$tag sendAgreementDataV1() data size error! ${data.size}\")\r\n            return false\r\n        }\r\n\r\n        val checkData = byteArrayOf(\r\n            model.toByte(),\r\n            0xFF.toByte(),\r\n            0xFF.toByte(),\r\n            0xFF.toByte(),\r\n            0xFF.toByte(),\r\n            0xFF.toByte(),\r\n            endBytes.toByte())\r\n        System.arraycopy(data, 0, checkData, 1, data.size)\r\n\r\n        //crc\r\n        val crc = CRC8Util.getCheckCode(checkData)\r\n\r\n        //sendData\r\n        val sendData = ByteArray(8)\r\n        System.arraycopy(checkData, 0, sendData, 0, checkData.size)\r\n        sendData[7] = crc\r\n\r\n        val responseOpcode = SendCmdUtils.RES_OPCODE_F0\r\n        if (isResponse) {\r\n            SendCmdUtils.RES_OPCODE_F1\r\n        }\r\n        return sendCmdUtils.send(address, sendData, responseOpcode)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/FDSMeshLib/src/main/java/com.godox.sdk/api/FDSCommandApi.kt b/FDSMeshLib/src/main/java/com.godox.sdk/api/FDSCommandApi.kt
--- a/FDSMeshLib/src/main/java/com.godox.sdk/api/FDSCommandApi.kt	(revision ca3b242b2b9e931de28ad58599de73e77ce90824)
+++ b/FDSMeshLib/src/main/java/com.godox.sdk/api/FDSCommandApi.kt	(date 1664178454019)
@@ -4,6 +4,7 @@
 import com.godox.sdk.callbacks.FDSBatteryPowerCallBack
 import com.godox.sdk.callbacks.FDSFirmwareCallBack
 import com.godox.sdk.callbacks.FDSMCUCallBack
+import com.godox.sdk.tool.AppIDVerification
 import com.godox.sdk.tool.CRC8Util
 import com.godox.sdk.tool.send.SendCmdUtils
 import com.telink.ble.mesh.util.LOGUtils
@@ -553,6 +554,10 @@
         address: Int,
         isResponse: Boolean
     ): Boolean {
+        if (!AppIDVerification.instance.isVerificationPassed()) {
+            return false
+        }
+
         if (data.isEmpty() || data.size > 6) {
             LOGUtils.e("$tag sendAgreementDataV1() data size error! ${data.size}")
             return false
Index: FDSMeshLib/src/main/java/com.godox.sdk/Configures.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.godox.sdk\r\n\r\nobject Configures {\r\n    const val SDK_VERSION = \"1.0.1\"\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/FDSMeshLib/src/main/java/com.godox.sdk/Configures.kt b/FDSMeshLib/src/main/java/com.godox.sdk/Configures.kt
--- a/FDSMeshLib/src/main/java/com.godox.sdk/Configures.kt	(revision ca3b242b2b9e931de28ad58599de73e77ce90824)
+++ b/FDSMeshLib/src/main/java/com.godox.sdk/Configures.kt	(date 1664177180980)
@@ -1,5 +1,16 @@
 package com.godox.sdk
 
+import android.content.Context
+
 object Configures {
     const val SDK_VERSION = "1.0.1"
+
+    /**
+     * 获取应用程序包名
+     * @param context
+     * @return 当前应用包名
+     */
+    fun getAppPackageName(context: Context): String {
+        return context.packageName
+    }
 }
\ No newline at end of file
Index: app/src/main/res/layout/activity_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".ui.MainActivity\"\r\n    android:orientation=\"vertical\"\r\n    android:padding=\"10dp\">\r\n\r\n    <LinearLayout\r\n        android:id=\"@+id/lr_studio1\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"100dp\"\r\n        android:layout_marginTop=\"15dp\"\r\n        android:background=\"@drawable/white_round_bg\"\r\n        android:padding=\"10dp\"\r\n        android:gravity=\"center_vertical\">\r\n\r\n        <TextView\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:textColor=\"@color/black\"\r\n            android:textSize=\"18sp\"\r\n            android:text=\"studio-1\"/>\r\n\r\n    </LinearLayout>\r\n\r\n</LinearLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_main.xml b/app/src/main/res/layout/activity_main.xml
--- a/app/src/main/res/layout/activity_main.xml	(revision ca3b242b2b9e931de28ad58599de73e77ce90824)
+++ b/app/src/main/res/layout/activity_main.xml	(date 1664175320012)
@@ -25,4 +25,13 @@
 
     </LinearLayout>
 
+    <Button
+        android:id="@+id/bt_test"
+        android:layout_width="200dp"
+        android:layout_height="100dp"
+        android:text="TSET"
+        android:textSize="16sp"
+        android:textColor="@color/black"
+        android:layout_marginTop="20dp"/>
+
 </LinearLayout>
\ No newline at end of file
Index: FDSMeshLib/src/main/java/com.godox.sdk/tool/MD5AndDESUtils.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/FDSMeshLib/src/main/java/com.godox.sdk/tool/MD5AndDESUtils.kt b/FDSMeshLib/src/main/java/com.godox.sdk/tool/MD5AndDESUtils.kt
new file mode 100644
--- /dev/null	(date 1664178454025)
+++ b/FDSMeshLib/src/main/java/com.godox.sdk/tool/MD5AndDESUtils.kt	(date 1664178454025)
@@ -0,0 +1,99 @@
+package com.godox.sdk.tool
+
+import android.annotation.SuppressLint
+import com.base.mesh.api.utils.ByteUtils
+import com.godox.sdk.api.FDSMeshApi
+import com.godox.sdk.api.imp.FDSMeshImp
+import java.io.UnsupportedEncodingException
+import java.nio.charset.StandardCharsets
+import java.security.Key
+import java.security.MessageDigest
+import javax.crypto.Cipher
+import javax.crypto.spec.SecretKeySpec
+
+object MD5AndDESUtils {
+
+    /**
+     * MD5加密
+     */
+    fun md5ToHexStr(str: String): String {
+        var hexStr = ""
+        try {
+            val md5 = MessageDigest.getInstance("md5")
+            val digest = md5.digest(str.toByteArray(StandardCharsets.UTF_8))
+            hexStr = ByteUtils.toHexStringNotSegmentation(digest)
+        } catch (e: Exception) {
+            e.printStackTrace()
+        }
+        return hexStr
+    }
+
+    /**
+     * DES加密，输入内容将被UTF-8编码后进行加密，密钥长度不要大于8位
+     *
+     * @param key 密钥
+     * @param content 明文
+     * @return 密文
+     */
+    fun encryptByDES(key: String, content: String): String {
+
+        // 生成密钥，密钥长度限定为8位，如果超出8位取前8位
+        val tmpBytes: ByteArray = try {
+            key.toByteArray(StandardCharsets.UTF_8)
+        } catch (e: UnsupportedEncodingException) {
+            return ""
+        }
+        val keyBytes = ByteArray(8)
+        var i = 0
+        while (i < tmpBytes.size && i < keyBytes.size) {
+            keyBytes[i] = tmpBytes[i]
+            i++
+        }
+        // DES加密成为密文
+        try {
+            val k: Key = SecretKeySpec(keyBytes, "DES")
+            val cipher = Cipher.getInstance("DES")
+            cipher.init(Cipher.ENCRYPT_MODE, k)
+            val output = cipher.doFinal(content.toByteArray(StandardCharsets.UTF_8))
+            return ByteUtils.toHexStringNotSegmentation(output)
+        } catch (e: Exception) {
+            e.printStackTrace()
+        }
+        return ""
+    }
+
+    /**
+     * DES解密，输入内容是密文，密钥长度不要大于8位
+     *
+     * @param key 密钥
+     * @param cipherText 密文
+     * @return 明文
+     */
+    @SuppressLint("GetInstance")
+    fun decryptByDES(key: String, cipherText: String): String {
+
+        // 生成密钥，密钥长度限定为8位，如果超出8位取前8位
+        val tmpBytes: ByteArray = try {
+            key.toByteArray(StandardCharsets.UTF_8)
+        } catch (e: UnsupportedEncodingException) {
+            return ""
+        }
+        val keyBytes = ByteArray(8)
+        var i = 0
+        while (i < tmpBytes.size && i < keyBytes.size) {
+            keyBytes[i] = tmpBytes[i]
+            i++
+        }
+        // DES解密成为明文
+        try {
+            val k: Key = SecretKeySpec(keyBytes, "DES")
+            val cipher = Cipher.getInstance("DES")
+            cipher.init(Cipher.DECRYPT_MODE, k)
+            val output = cipher.doFinal(ByteUtils.hexStringToBytes(cipherText))
+            return output.toString(StandardCharsets.UTF_8)
+        } catch (e: Exception) {
+            e.printStackTrace()
+        }
+        return ""
+    }
+}
\ No newline at end of file
Index: FDSMeshLib/src/main/java/com.godox.sdk/tool/HttpUtils.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/FDSMeshLib/src/main/java/com.godox.sdk/tool/HttpUtils.kt b/FDSMeshLib/src/main/java/com.godox.sdk/tool/HttpUtils.kt
new file mode 100644
--- /dev/null	(date 1664180048217)
+++ b/FDSMeshLib/src/main/java/com.godox.sdk/tool/HttpUtils.kt	(date 1664180048217)
@@ -0,0 +1,81 @@
+package com.godox.sdk.tool
+
+import android.text.TextUtils
+import com.telink.ble.mesh.util.LOGUtils
+import java.io.ByteArrayOutputStream
+import java.io.IOException
+import java.io.InputStream
+import java.net.HttpURLConnection
+import java.net.URL
+import java.nio.charset.StandardCharsets
+
+
+class HttpUtils {
+
+    companion object {
+        const val GET = "GET"
+        const val POST = "POST"
+    }
+
+    /**
+     * HTTP请求
+     *
+     * @param requestMethod 请求方式
+     * @param urlStr 请求地址
+     * @param httpRequestCallback 请求结果
+     */
+    fun httpRequest(requestMethod: String, urlStr: String, httpRequestCallback: (String)-> Unit){
+        Thread {
+            val url = URL(urlStr)
+            val connection = url.openConnection() as HttpURLConnection
+            var inputStream: InputStream? = null
+            var responseCode = -1
+            try {
+                //设置请求参数
+                connection.requestMethod = requestMethod
+                connection.connectTimeout = 60 * 1000
+                connection.readTimeout = 60 * 1000
+
+                //开始连接
+                connection.connect()
+
+                LOGUtils.d("httpRequest responseCode:${connection.responseCode}")
+                //获取响应数据
+                responseCode = connection.responseCode
+                if (responseCode == 200) {
+                    //获取返回的数据
+                    inputStream = connection.inputStream
+
+                    //读取response的返回值
+                    val bout = ByteArrayOutputStream()
+                    val bytes = ByteArray(1024)
+                    var len: Int
+                    while (inputStream.read(bytes).also { len = it } >= 0) {
+                        bout.write(bytes, 0, len)
+                    }
+
+                    val responseStr = String(bout.toByteArray(), StandardCharsets.UTF_8)
+
+                    if (!TextUtils.isEmpty(responseStr)) {
+                        httpRequestCallback(responseStr)
+                        return@Thread
+                    } else {
+                        //服务器返回数据错误
+                        httpRequestCallback("")
+                    }
+                }
+            } catch (e: Exception) {
+                e.printStackTrace()
+            } finally {
+                try {
+                    inputStream?.close()
+                } catch (e: IOException) {
+                    e.printStackTrace()
+                }
+                connection.disconnect()
+            }
+            //请求出错
+            httpRequestCallback("{\"code\":$responseCode")
+        }.start()
+    }
+}
\ No newline at end of file
Index: FDSMeshLib/src/main/java/com.godox.sdk/tool/send/SendCmdUtils.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.godox.sdk.tool.send\r\n\r\nimport com.base.mesh.api.main.MeshSend\r\nimport com.base.mesh.api.main.MeshTakeMsg\r\nimport com.base.mesh.api.model.NodeInfo\r\nimport com.telink.ble.mesh.util.LOGUtils\r\n\r\n/**\r\n * 发送数据和数据接收\r\n */\r\nclass SendCmdUtils private constructor() {\r\n\r\n    companion object {\r\n        const val RES_OPCODE_F0 = 0x0211F0\r\n        const val RES_OPCODE_F1 = 0x0211F1\r\n\r\n        private const val OPCODE = 0x0211F0\r\n        private const val retryCount = 0\r\n\r\n        val instance by lazy(LazyThreadSafetyMode.NONE) {\r\n            SendCmdUtils()\r\n        }\r\n    }\r\n\r\n    private var meshSend = MeshSend()\r\n    private var meshTakeMsg: MeshTakeMsg\r\n    val sendDataListener = SendDataListener()\r\n\r\n    init {\r\n        meshTakeMsg = MeshTakeMsg(sendDataListener, intArrayOf(RES_OPCODE_F0, RES_OPCODE_F1))\r\n    }\r\n\r\n    /**\r\n     * 发送数据\r\n     */\r\n    fun send(dtsAdr: Int, bytes: ByteArray, responseOpcode: Int): Boolean {\r\n        if (bytes.isEmpty()) {\r\n            LOGUtils.e(\"发送命令 bytes.isEmpty()，异常！\")\r\n            return false\r\n        }\r\n        return meshSend.sendData(dtsAdr, bytes, OPCODE, responseOpcode, retryCount)\r\n    }\r\n\r\n    /**\r\n     * 刷新节点在线状态\r\n     */\r\n    fun refreshNodeInfoState() {\r\n        meshSend.refreshNodeInfoState()\r\n    }\r\n\r\n    /**\r\n     * 配置节点自动上报在线状态\r\n     */\r\n    fun configNodePublishState(isOn: Boolean, nodeInfo: NodeInfo): Boolean {\r\n        return meshSend.configNodePublishState(isOn, nodeInfo)\r\n    }\r\n\r\n    /**\r\n     * 销毁资源\r\n     */\r\n    fun destroy() {\r\n        meshTakeMsg.destroy()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/FDSMeshLib/src/main/java/com.godox.sdk/tool/send/SendCmdUtils.kt b/FDSMeshLib/src/main/java/com.godox.sdk/tool/send/SendCmdUtils.kt
--- a/FDSMeshLib/src/main/java/com.godox.sdk/tool/send/SendCmdUtils.kt	(revision ca3b242b2b9e931de28ad58599de73e77ce90824)
+++ b/FDSMeshLib/src/main/java/com.godox.sdk/tool/send/SendCmdUtils.kt	(date 1664178454011)
@@ -3,6 +3,7 @@
 import com.base.mesh.api.main.MeshSend
 import com.base.mesh.api.main.MeshTakeMsg
 import com.base.mesh.api.model.NodeInfo
+import com.godox.sdk.tool.AppIDVerification
 import com.telink.ble.mesh.util.LOGUtils
 
 /**
Index: FDSMeshLib/src/main/java/com.godox.sdk/tool/AppIDVerification.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/FDSMeshLib/src/main/java/com.godox.sdk/tool/AppIDVerification.kt b/FDSMeshLib/src/main/java/com.godox.sdk/tool/AppIDVerification.kt
new file mode 100644
--- /dev/null	(date 1664180204295)
+++ b/FDSMeshLib/src/main/java/com.godox.sdk/tool/AppIDVerification.kt	(date 1664180204295)
@@ -0,0 +1,71 @@
+package com.godox.sdk.tool
+
+import android.content.Context
+import android.text.TextUtils
+import com.godox.sdk.Configures
+import com.telink.ble.mesh.util.LOGUtils
+import org.json.JSONArray
+import org.json.JSONObject
+
+
+
+
+/**
+ * AppID检验
+ */
+class AppIDVerification private constructor() {
+    private var isVerificationPassed = false
+
+    /**
+     * 单例
+     */
+    companion object {
+        const val DEFAULT_SDK_DES_KEY = "kcPYrql@sC$%=cDREs8%BfwN"
+
+        val instance by lazy(LazyThreadSafetyMode.NONE) {
+            AppIDVerification()
+        }
+    }
+
+    /**
+     * 验证AppId
+     */
+    fun setAppId(context: Context, appId: String) {
+
+        //本地校验
+        val encKey = MD5AndDESUtils.md5ToHexStr(DEFAULT_SDK_DES_KEY)
+        val encPackageName = MD5AndDESUtils.decryptByDES(encKey, appId)
+        isVerificationPassed = encPackageName == Configures.getAppPackageName(context)
+
+        LOGUtils.i("AppIDVerification LOCAL==> encPackageName:$encPackageName isVerificationPassed:$isVerificationPassed ")
+
+        //HTTP校验
+        val url = "http://godox.light.belvie-iot.com/api/sdk/queryValid/$appId"
+        HttpUtils().httpRequest(HttpUtils.GET,url){
+            isVerificationPassed = if (TextUtils.isEmpty(it)){
+                false
+            } else {
+                val jsonObject = JSONObject(it)
+                if (jsonObject.has("code")){
+                    val code = jsonObject.getInt("code")
+                    code == 0
+                } else {
+                    false
+                }
+            }
+            LOGUtils.i("AppIDVerification HTTP==> isVerificationPassed:$isVerificationPassed")
+        }
+    }
+
+    /**
+     * 判断校验是否通过
+     */
+    fun isVerificationPassed(): Boolean {
+        return if (!isVerificationPassed) {
+            LOGUtils.e("FDS_SDK 初始化异常，校验不通过！")
+            false
+        } else {
+            true
+        }
+    }
+}
\ No newline at end of file
